doctype html

head

    meta(charset='utf-8')
    meta(name='prezento-capable', content='yes')
    meta(name='prezento-vendor', content='dzslides')

    title 100% Stateless with JWT

    link(href='dzslides.css', rel='stylesheet')
    //link(href='https://fonts.googleapis.com/css?family=Press+Start+2P', rel='stylesheet', type='text/css')
    link(href='fonts.css', rel='stylesheet')
    link(href='highlight.github.css', rel='stylesheet')
    link(href='index.css', rel='stylesheet')

body

    section.slide-startEnd
        .startEnd-author
            .startEnd-authorName Hubert<br>Sablonnière
            img.startEnd-authorAvatar(src='media/hsablonniere-avatar.jpg')
            .startEnd-authorTwitter @hsablonniere<br>@OpenDevise
        .startEnd-title
            .startEnd-subtitle 100% Stateless with
            .startEnd-maintitle JWT
        .startEnd-footer
            img.startEnd-companyLogo.zoom(src='./media/opendevise-web-20161031-blank.png')
            .startEnd-talkInfos
                .startEnd-hashtags #SaveTheLemmings #JWT
                .startEnd-locationDate Devoxx BE / 2016-11-09
        div(role='note').
            Hello everyone!
            My name is Hubert SABLONNIÈRE.
            I'm a developer hacking on web technologies for OpenDevise and, today, I going to talk about JWT.
            This story begins with...

    section
        figure.fs-media.fs-media-cover
            img(src="/media/compaq-2.jpg")
            figcaption Christmas 1994
        div(role='note').
            ...my first computer.
            Ooo-kay, it wasn't really "my" computer,
            it was for the whole family to share.
            We got it for Christmas of '94.

    section
        figure.fs-media.fs-media-cover
            img(src="/media/compaq-1.jpg")
        div(role='note').
            It was a Compaq Presario with a 33Mz processor.
            It was state of the art.
            When my father brought it home, we went crazy.
            With my sister, we immediately looked for games.
            Annnnd, for sure...

    section.black
        figure.fs-media.fs-media-contain
            picture
                source(srcset="/media/solitaire-demineur-169.png", media="(min-aspect-ratio: 14/9)")
                img(src="/media/solitaire-demineur-43.png")
        div(role='note').
            ...we found them :(
            But then our cousins clued us in about...

    section
        figure.fs-media
            img(src="/media/msdos.png")
        div(role='note').
            ...MS-DOS games (pause...) woooooah (ray-style).
            Each time I was over at one of my friend's house, and he showed off a new game, I was like, "Does it fit on a floppy?" ;)
            Well, thinking about the fact that the Amazon web page in 2016 barely fits on 4 of them... 
            (pause...)
            One of my favorite games was...

    section
        figure.fs-media.fs-media-fill
            video(src="/media/lemmings-fun-level-1-just-dig-1991-ms-dos.webm#t=24", autoplay="false", data-playbackrate="3")
        div(role='note').
            ...Lemmings.
            Who here has played Lemmings?
            Incredible.
            Every time my friend sees me with this t-shirt on, he's like, "Why are you wearing the shirt with pixelated Beatles on it again?"
            (pause...)
            I love this game. (You can tell?)
            I've played it eeeeverywhere.
            But actually, I've never played it in a movie theater.
            So for the 2 guys in the back who don't know this game, (pause...), let's fix that.
            (pause...)
            So it's a simple game.
            You have little guys who enter the world from the hatch and you have to help them find the exit.
            The problem is, they are really stupid.
            They only walk straight, so sometimes you have to prevent them from killing themselves.
            You can tell them to dig, to climb, to build stairs...just like in real life.
            At the end, if you saved enough Lemmings, the level is completed and you get a code.

    section.no-transition
        figure.fs-media.fs-media-fill.zoom-code
            img(src="/media/lemmings-code-info.jpg")
        div(role='note').
            This code system is really handy because when you hear, "Hubert, it's dinner time."
            Well, back then you had to shut down the computer.
            And the next morning, if you redo all 17 levels...

    section.black
        figure.fs-media.fs-media-fill
            img(src="/media/lemmings-code-input.png")
        div(role='note').
            ...you just enter the code and you arrive directly at the level where you left off.

    section 
        div(role='note').
            (walk)

    section
        figure.fs-media
            img(src="/media/netscape.png")
        div(role='note').
            // (phrasing?)
            Meanwhile, at Netscape headquarters, Lou Montulli invents...

    section.slide-quote
        .quote The <span class="blink">&lt;blink&gt;</span> tag is the worst thing I've ever done for the Internet.
        .quote-author Lou Montulli<br>(netscape)
        img.quote-author-avatar(src="./media/loumontulli.jpg")
        div(role='note').
            ...the < blink > tag.
            Hey, before you troll him too hard, come on, I used, you used it, everybody used it.

            But Lou also had very good ideas.
            It's June 1994, Netscape is working for a client developing a virtual basket solution for an e-commerce website.

            Back then, in order to do this, you had to store the state in the URL.
            It pretty much made the buying experience like a vending machine.
            One item at a time.

    section.slide-section.fit-title
        .title Once upon a time...
        .title <span class="title-info">HTTP cookies</span>
        div(role='note').
            So, Lou proposed to apply the existing magic cookies concept on the Web.
            And that's how HTTP cookies were born.
            Lou works on a specification with John Giannandrea
            and the support arrives pretty quickly in Netscape.
            The first official usage is to know if a visitor of netscape.com has ever come to the site.

        //L'idée générale est proche du système des Lemmings :
        //le serveur donne au navigateur un cookie et celui ci l'enregistre,
        //lors des prochaines visites, ce cookie est réenvoyé au serveur tel quel.
        //onv
        //L'idée général c'est de copier le fonctionnement d'un vestiaire et des tickets qu'on donne aux clients en échange de leur manteau.
        //C'est ainsi que les...
        //...cookies HTTP voient le jour.
        //Lou travaille sur une spécification avec John Giannandrea.
        //Le support arrive dans Netscape assez rapidement et le premier usage officiel était de savoir si les visiteurs de netscape.com étaient déjà venus sur le site.

    section.no-transition
        div(role='note').
            The behavior hasn't changed much, but just so we're all on the same page, let's do a recap.
            When a user is signing into a website with...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-01.svg")
        div(role='note').
            ...his browser,
            he enters his username/password and he validates the sign-in form.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-02.svg")
        div(role='note').
            The browser sends a POST request to the server.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-03.svg")
        div(role='note').
            The server asks the database if the user exists.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-04.svg")
        div(role='note').
            The database responds, "John Lennon, of course, here's the hashed and salted password."
            The server has to verify the hashed and salted password using the latest security protocol (bcrypt, pbkdf2 or whatever).

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-05.svg")
        div(role='note').
            If all is good, the server can finally send the response
            and that's when the browser stores the key/value pair name=John,
            the very cookie we're talking about.

    section
        div(role='note').
            // (wc?)
            Now, you have to know, a browser is friendly when it comes to its cookies.
            //Whenever a browser sends a request to a given domain, it's like, "Here are all the cookies you gave me."
            Whenever a browser sends a request to a given domain, it's like, "I'm a browser. What do I do? I send back all my cookies."

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-06.svg")
        div(role='note').
            So when the user comes back,
            his browser automatically sends this cookie to the server,
            and the server uses this data...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-07.svg")
        div(role='note').
            ...to display to the user a page that remembers that his name is John.
            I don't know about you, but it reminds me of the code system from Lemmings,
            but back then,

    section
        figure.fs-media.fs-media-cover
            img(src="/media/lemmings-code-notebook.jpg")
        div(role='note').
            as an 8 year old,
            I acted as the browser.
            I handled the state myself.
            I had my homemade framework, the notebook... [clac]
            The thing with Lemmings is that we couldn't guess the code for the next level.
            That would be too easy.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-basic-08.svg")
        div(role='note').
            But in this case, I can easily trick the server into thinking I'm Paul despite the that I'm John.

    section.no-transition
        div(role='note').
            Le serveur doit trouver un moyen pour faire confiance au cookie que je lui donne.
            C'est une des raisons pour laquelle on a introduit le concept d'identifiant de session.

        //On est toujours sur ...
        //Explications en plusieurs étapes du fonctionnement des cookies avec session ID
        //cas BDD pour les sessions persistantes
        // C'est finalement assez proche du fonctionnement des codes des lemmings
        // ou pas car c'est pas unique à ma réussite du niveau
        // reparler du manteau et des tokens => token par référence

    //section.no-transition
    //    figure.fs-media.fs-media-cover.fs-media-cover--left
    //        img(src="/media/schema-cookies-session-05.svg")
    //    div(role='note').
    //
    //section.no-transition
    //    figure.fs-media.fs-media-cover.fs-media-cover--left
    //        img(src="/media/schema-cookies-session-06.svg")
    //    div(role='note').
    //
    //section.no-transition
    //    figure.fs-media.fs-media-cover.fs-media-cover--left
    //        img(src="/media/schema-cookies-session-07.svg")
    //    div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-session-08.svg")
        div(role='note').
            En gros, si je reprens la situation prédécente :
            Juste avant d'envoyer la réponse,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-session-09.svg")
        div(role='note').
            le serveur va générer un identifiant bien aléatoire,
            genre 42,
            et il va associer dans un cache mémoire l'identifiant 42 avec les informations de l'utilisateur.
            Et du coup, au lieu d'envoyer le nom de la personne connectée,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-session-10.svg")
        div(role='note').
            le serveur envoie juste cet identifiant de session dans un cookie,
            et quand le visiteur navigue sur le site,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-session-11.svg")
        div(role='note').
            le navigateur renvoie les cookies au serveur.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-session-12.svg")
        div(role='note').
            Pour savoir qui a demandé la page,
            le serveur a besoin de son cache mémoire pour transformer un identifiant opaque...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-session-13.svg")
        div(role='note').
            ...en informations sur l'utilisateur et ainsi...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-cookies-session-14.svg")
        div(role='note').
            ...envoyer une réponse contextualisée à l'utilisateur.
            Génial.

    section
        figure.fs-media.fs-media-cover
            figcaption insert lemmings video here

    section
        div(role='note').
            Il y a plusieurs inconvénients à utiliser des identifiants de session.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-02.svg")
        div(role='note').
            Si votre site a du succès,
            un seul serveur ne suffira pas,
            il risque de tomber.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-03.svg")
        div(role='note').
            Pas de soucis, une archi avec deux instances et un load balancer, merci au revoir.
            Après, je dis deux mais on va imaginer que vous aillez...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-04.svg")
        div(role='note').
            ...vraiment,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-05.svg")
        div(role='note').
            beaucoup,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-06.svg")
        div(role='note').
            beaucoup de succès.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-07.svg")
        div(role='note').
            Toutes les instances de ce cluster sont les mêmes.
            Peut importe la technique (provisionning, VM, conteneurs...)
            on a répliqué la même conf partout.
            Du coup, ils...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-08.svg")
        div(role='note').
            ...ont tous leur propre cache mémoire,
            et si j'arrive avec l'identifiant de session...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-09.svg")
        div(role='note').
            ...42 sur le serveur qui a les infos dans son cache mémoire,
            tout va bien.
            Maintenant imaginez que le load balancer...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-10.svg")
        div(role='note').
            ...me redirige sur un noeud qui n'a pas les infos de la session 42,
            je suis mal barré.
            [WALK]
            La solution facile et naïve, c'est de ne...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-11a.svg")
        div(role='note').
            ...plus avoir de cache mémoire sur chaque serveur.
            A la place, on met un...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-11b.svg")
        div(role='note').
            cache partagé "as a service",
            il connait...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-11c.svg")
        div(role='note').
            ...la session 42,
            mais ils connait aussi toutes les autres,
            du coup, il peut donc répondre à...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-11d.svg")
        div(role='note').
            ...toutes les instances du cluster.
            En faisant ça, on a décalé le problème d'une couche et on a...

    section.slide-section.no-images
        .fit-title
            .title insert lemmings video here
        div(role='note').
            ...un bon gros Single Point Of Failure.
            [...]

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-11e.svg")
        div(role='note').
            Si le cache partagé tombe,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-11f.svg")
        div(role='note').
            on est cuit.
            Non la solution, c'est plutôt de...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-12a.svg")
        div(role='note').
            ...laisser un cache mémoire sur chaque instance,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-12b.svg")
        div(role='note').
            et d'avoir de la réplication,
            un cache distribué genre memcached, ehcache et compagnie.
            Du coup,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-12c.svg")
        div(role='note').
            peut importe le noeud choisi par le load balancer pour traiter une requête,
            chaque instance à les infos de toutes les sessions.
            Si une instance...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-12d.svg")
        div(role='note').
            ...tombe, no soucy, le load balancer gère.
            Côté dev, les techniques et les outils sont là.
            Par contre, en fonction de votre contexte,
            la difficulté peut se situer côté ops.
            Niveau réseau, toutes les instances doivent se voir,
            il faut ouvrir plus de ports et ça discute dans tous les sens.
            [...]

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-12a.svg")
        div(role='note').
            L'autre technique, c'est de donner un peu d'intelligence au load balancer en utilisant des...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-13.svg")
        div(role='note').
            ...sticky sessions.


    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-14a.svg")
        div(role='note').
            Quand une requête arrive,
            le load balancer lit le cookie : "identifiant de session 36 !"

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-14b.svg")
        div(role='note').
            "C'est par ici Monsieur !"

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-15a.svg")
        div(role='note').
            "Identifiant 42, c'est par là".
            Par contre, si le noeud...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-scalable-shared-memory-15b.svg")
        div(role='note').
            ...tombe,
            une partie des sessions utilisateurs sont perdues,
            mais le site est toujours disponible.
            Après, rien ne vous empêche de mettre de mettre en place et de maintenir des sticky sessions avec un...

    //- section.no-transition
    //-     figure.fs-media.fs-media-cover.fs-media-cover--left
    //-         img(src="/media/schema-scalable-shared-memory-16.svg")
    //- 
    //- section.no-transition
    //-     figure.fs-media.fs-media-cover.fs-media-cover--right-nt
    //-         img(src="/media/schema-scalable-shared-memory-16.svg")

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img.trigger-media-on(src="/media/schema-scalable-shared-memory-16.svg")
            img.trigger-media-off(src="/media/schema-scalable-shared-memory-16plus.svg")
        div(role='note').
            ...cache distribué en plus, en mode ceinture/airbag.
            Tout va dépendre de votre budget.
            [...]
            Le choix de l'architecture et la difficulté de mise en place vont forcément dépendre de votre contexte, de votre stack, de vos devs, de vos ops, etc...
            mais je ne peux pas m'empêcher de me dire que ça serait plus simple si l'état de la session était complètement géré...

    section
        figure.fs-media.fs-media-cover
            img(src="/media/lemmings-code-notebook.jpg")
        div(role='note').
            ...côté client.
            Le seul truc qui manque, c'est un moyen pour le serveur de faire confiance au navigateur pour qu'il ne puisse pas tricher.
            Quand la navigateur de John envoie un cookie qui dit "Je suis John et je suis Admin",
            le serveur doit trouver un moyen pour lui faire confiance.

    section
        div(role='note').
            C'est là que l'IETF nous propose la RFC 7519 :

    section.slide-section
        .title-initials
            .title.trigger-off <span class="title-info">J</span>SON
            .title.trigger-off <span class="title-info">W</span>eb
            .title.trigger-off <span class="title-info">T</span>oken
            .title.trigger-on <span class="title-info">J</span>o
            .title.trigger-on <span class="title-info">W</span>ilfried
            .title.trigger-on <span class="title-info">T</span>songa
        div(role='note').
            Les JSON Web Token !
            Alors d'abord, il y a deux points importants :
            Primo : Ça n'a strictement rien à voir avec GWT !!!
            Deuxio : Ce sont les mêmes initiales que Jo Wilfried Tsonga [...] coincidence ??
            Mais alors qu'est ce qu'un JWT ?
            Si vous lisez quelques articles,
            vous allez peut-être tomber sur :
            //Il faut déjà bien préciser qu'un JWT ne doit pas être comparé à un cookie
            //Bref, si vous faite un peu de lecture sur le sujet,
            //vous verrez souvent des articles qui opposent et comparent les JWT aux cookies.
            //C'est une erreur, il faut opposer et comparer les JWT aux IDs de session.
            //ne pas opposer cookie vs token
            //=> Remplacer des sessions
            //Token par valeur, token par référence

    section
        figure.fs-media.fs-media-cover
            img.trigger-media-on(src="/media/schema-cookie-vs-jwt-1.svg")
            img.trigger-media-off(src="/media/schema-cookie-vs-jwt-2.svg")
        div(role='note').
            "Cookies ou JWT : coment choisir ?"
            Il faut rester subtil sur les définitions !!
            Comparer des cookies à des JWT n'a...
            ...aucun sens.
            Un cookie n'est qu'un moyen de transport.
            Ce sont les...

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-cookie-vs-jwt-3.svg")
        div(role='note').
            ...identifiant de session qu'il faut comparer au JWT,
            par ce que comme son nom l'indique, un JWT c'est avant tout un...

    section
        figure.fs-media.fs-media-cover
            img(src="/media/schema-value-vs-reference-01.svg")
        div(role='note').
            ...token.
            Et il y a...

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-value-vs-reference-02.svg")
        div(role='note').
            ...plusieurs sortes de tokens.
            Par référence et valeur.

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-value-vs-reference-03.svg")
        div(role='note').
            Les identifiants de session sont bien des tokens par référence,
            Comme pour une carte bleue,
            j'ai besoin d'un tiers pour savoir ce qu'il y a derrière.

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-value-vs-reference-04.svg")
        div(role='note').
            Les JWT sont des tokens par valeur,
            Je n'ai pas besoin de tiers pour savoir qu'il s'agit d'un billet de 100 euros,
            il faut juste que je sache reconnaitre s'il a bien été émis par l'imprimerie nationale ou s'il s'agit d'une contrefaçon.
            Si je reprends mon...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-01.svg")
        div(role='note').
            ...exemple de tout à l'heure,
            mon serveur n'a plus besoin de cache mémoire,
            il a simplement besoin...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-02.svg")
        div(role='note').
            ...de générer un JWT qui dit qu'il s'agit de John,
            et de calculer la signature à l'aide d'un secret partagé.
            Il ne reste plus qu'à...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-03.svg")
        div(role='note').
            ...envoyer le JWT au navigateur dans un cookie.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-04.svg")
        div(role='note').
            A la prochaine visite, le navigateur renvoie le cookie avec le JWT,

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-05.svg")
        div(role='note').
            le serveur va pouvoir vérifier la signature et lire les informations,
            "Ah, oui, c'est bien John !"

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-06.svg")
        div(role='note').
            "Tiens navigateur, voici une page Web contextualisée pour John!"
            Le tout a été fait sans avoir besoin d'un tiers,
            du coup : pas besoin de cache mémoire.
            [...]
            Alors, à quoi il ressemble ce token ?
            Et bien ça ressemble à...

    section.no-transition
        div(role='note').
            L'idée de signer le contenu des cookies n'est pas nouvelle.
            Ce qui est intéressant avec JWT, c'est d'avoir un standard pour

    section
        pre.wrap
            code.
                <span class="code-hl">eyJ</span>hbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.<span class="code-hl">eyJ</span>pc3MiOiJhdXRoLWJhY2tlbmQiLCJzdWIiOiJqbGVubm9uIiwiYXVkIjoid2ViLWZyb250ZW5kIiwiZXhwIjoxNDU4NjM4NjE4LCJuYmYiOm51bGwsImlhdCI6MTQ1ODYzNTAxOCwianRpIjoiODVhM2NiNGMtNTcyMC00ZGJhLWFlOTQtOTMxZDYwOTM3YzQ3IiwibmFtZSI6IkpvaG4gTGVubm9uIiwicGVybWlzc2lvbnMiOlsiUExBWUlOR19HVUlUQVIiLCJTSU5HSU5HIl19.kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM
        div(role='note').
            ...ça.
            Bon, je sais pas vous mais moi j'ai pas fait base64URL en LV3,
            du coup, je vous propose une petite explication !
            Un JWT est composé de...

    section.no-transition
        pre.wrap
            code.
                <span class="jwt-header">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="code-hl">.</span><span class="jwt-payload">eyJpc3MiOiJhdXRoLWJhY2tlbmQiLCJzdWIiOiJqbGVubm9uIiwiYXVkIjoid2ViLWZyb250ZW5kIiwiZXhwIjoxNDU4NjM4NjE4LCJuYmYiOm51bGwsImlhdCI6MTQ1ODYzNTAxOCwianRpIjoiODVhM2NiNGMtNTcyMC00ZGJhLWFlOTQtOTMxZDYwOTM3YzQ3IiwibmFtZSI6IkpvaG4gTGVubm9uIiwicGVybWlzc2lvbnMiOlsiUExBWUlOR19HVUlUQVIiLCJTSU5HSU5HIl19</span><span class="code-hl">.</span><span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>
        div(role='note').
            ...3 parties séparées par des points.

    section.no-transition
        pre.wrap
            code.
                > encodedHeader
                <span class="jwt-header">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span>




                > encodedPayload
                <span class="jwt-payload">eyJpc3MiOiJhdXRoLWJhY2tlbmQiLCJzdWIiOiJqbGVubm9uIiwiYXVkIjoid2ViLWZyb250ZW5kIiwiZXhwIjoxNDU4NjM4NjE4LCJuYmYiOm51bGwsImlhdCI6MTQ1ODYzNTAxOCwianRpIjoiODVhM2NiNGMtNTcyMC00ZGJhLWFlOTQtOTMxZDYwOTM3YzQ3IiwibmFtZSI6IkpvaG4gTGVubm9uIiwicGVybWlzc2lvbnMiOlsiUExBWUlOR19HVUlUQVIiLCJTSU5HSU5HIl19</span>

                > signature
                <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>




        div(role='note').
            Un header, un payload et une signature.
            Le header et le payload sont encodé en base64URL.
            C'est un peu comme base64 mais avec quelques différences pour être "URL safe".
            J'ai bien dit encodé et pas chiffré.

    section.no-transition
        pre.wrap
            code.
                > <span class="code-hl code-bold">base64URLdecode(</span>encodedHeader<span class="code-hl code-bold">)</span>;
                <span class="jwt-header">'{"alg":"HS256","typ":"JWT"}'</span>




                > <span class="code-hl  code-bold">base64URLdecode(</span>encodedPayload<span class="code-hl code-bold">)</span>;
                <span class="jwt-payload">'{"iss":"auth-backend","sub":"jlennon","aud":"web-frontend","exp":1458638618,"nbf":null,"iat":1458635018,"jti":"85a3cb4c-5720-4dba-ae94-931d60937c47","name":"John Lennon","permissions":["PLAYING_GUITAR","SINGING"]}'</span>


                > signature
                <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>




        div(role='note').
            N'importe qui peut lire ce qu'il y a dans un JWT.
            Il suffit d'appliquer une fonction qui décode le base64URL sur le header et le payload.
            Hum ça ressemble à du JSON tout ça,
            j'ai plus qu'à...

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-hl code-bold">parseJSON(</span> base64URLdecode(encodedHeader) <span class="code-hl code-bold">)</span>;
                <span class="jwt-header">{
                    "alg": "HS256",
                    "typ": "JWT"
                }</span>

                > <span class="code-hl code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-hl code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>

        div(role='note').
            ...parser tout ça pour obtenir des objets que je peux lire et manipuler avec mon langage préféré.
            Si on regarde d'un peu plus près le payload...

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-hl code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-hl code-bold">)</span>;
                <span class="jwt-payload">{

                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            ...il contient pas mal d'information intéressantes.
            On appelle ça des claims.
            Il y a les claims réservé qui sont definis par la spec et les claims privés en mode c'est la fête.
            Premier claim public :

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    <span class="code-hlnow">// Issuer</span>
                    <span class="code-hlnow">"iss": "auth-backend"</span>,
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            "Issuer" décrit celui qui a généré le token.
            Ici, il s'agit de mon backend d'authentification.
            Vous mettez n'importe quelle chaine de caractère, c'est votre truc à vous.

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    <span class="code-hlnow">// Subject</span>
                    <span class="code-hlnow">"sub": "jlennon"</span>,
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            "Subject" décrit le sujet du token.
            La plupart des claims concerne directement le sujet.
            On y met un identifiant métier : login, email, etc...

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    <span class="code-hlnow">// Audience</span>
                    <span class="code-hlnow">"aud": "web-frontend"</span>,
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            "Audience" décrit le destinataire pour lequel le token a été généré.

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    <span class="code-hlnow">// Expiration Time</span>
                    <span class="code-hlnow">"exp": 1458638618</span>,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            "Expiration time" décrit la date/heure à laquelle le token ne sera plus accepté par le système.

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    <span class="code-hlnow">// Not Before</span>
                    <span class="code-hlnow">"nbf": null</span>,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            "Not Before" décrit la date/heure avant laquelle le token ne peut pas être accepté.


    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    <span class="code-hlnow">// Issued At</span>
                    <span class="code-hlnow">"iat": 1458635018</span>,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            "Issued At" décrit la date/heure à laquelle le token a été généré.

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    <span class="code-hlnow">// JWT ID</span>
                    <span class="code-hlnow">"jti": "85a3cb4c-5720-4dba-ae94-931d60937c47"</span>,
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            "JWT ID" décrit un identifiant pour le token.
            Il doit être absolument unique parmis l'ensemble des tokens générés par l'application.

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    <span class="code-hlnow">// Private claims</span>
                    <span class="code-hlnow">"name": "John Lennon"</span>,
                    <span class="code-hlnow">"permissions": ["PLAYING_GUITAR", "SINGING"]</span>
                }</span>
        div(role='note').
            Enfin, on retrouve les private claims.
            En fonction des besoins de mon application,
            je vais pouvoir placer différentes informations sur mon utilisateur connecté.
            Ici, le prénom et les permissions.

    section.no-transition
        pre.wrap
            code.markdown.
                > <span class="code-bold">parseJSON(</span> base64URLdecode(encodedPayload) <span class="code-bold">)</span>;
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>
        div(role='note').
            OK, du coup, comment le serveur va pouvoir faire confiance à ce truc là ?
            C'est le navigateur qui dit, je suis Hubert, j'ai telles permissions...
            mais souvenez vous,

    section.no-transition
        pre.wrap
            code.
                > parseJSON( base64URLdecode(encodedHeader) );
                <span class="jwt-header">{ <span class="code-hl">"alg": "HS256"</span>, "typ": "JWT" }</span>

                > parseJSON( base64URLdecode(encodedPayload) );
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>

                > signature
                <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>
        div(role='note').
            il y a 3 parties,
            on a aussi le header et la signature
            et dans le header,
            on retrouve le nom de l'algorithme qui a servi à calculer la signature.

    section.no-transition
        pre.wrap
            code.
                > parseJSON( base64URLdecode(encodedPayload) );
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>

                > signature
                <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>

                > <span class="code-hl code-bold">hmacSha256(</span>encodedHeader + '.' + encodedPayload, 's3cr3t'<span class="code-hl code-bold">)</span>;


        div(role='note').
            Du coup, on applique la fonction hmacSha256 sur une concatenation du header et du payload,
            dans leur forme encodé en base64URL
            avec un point au milieu.
            Pour appliquer la fonction, il faut un secret partagé.
            C'est ce qui garanti que seul les détenteurs du secret partagé pourront signer et vérifier des tokens.
            Je calcule...

    section.no-transition
        pre.wrap
            code.
                > parseJSON( base64URLdecode(encodedPayload) );
                <span class="jwt-payload">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>

                > signature
                <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>

                > hmacSha256(encodedHeader + '.' + encodedPayload, <span class="code-hl">'s3cr3t'</span>);
                <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>
        div(role='note').
            ...et je tombe sur la même chose, parfait !
            Le serveur peux faire confiance à ce que dit le client.

    section.no-transition
        pre.wrap
            code.markdown.
                > parseJSON( base64URLdecode(encodedPayload) );
                <span class="jwt-payload" data-code-id="jwt-body">{
                    "iss": "auth-backend",
                    "sub": "jlennon",
                    "aud": "web-frontend",
                    "exp": 1458638618,
                    "nbf": null,
                    "iat": 1458635018,
                    "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
                    "name": "John Lennon",
                    "permissions": ["PLAYING_GUITAR", "SINGING"]
                }</span>

                > signature
                <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>

                > hmacSha256(encodedHeader + '.' + encodedPayload, '<span data-code-id="jwt-secret">s3cr3t</span>');
                <span class="jwt-signature" data-code-id="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>

        div(role='note').
            Par contre, si le client comment à faire le malin genre,
            salut en fait je suis trop un admin et ce token expire dans très longtemps.
            Le serveur ne fera pas confiance à ces données car la signature n'est pas la même.

    //section.no-transition
    //    pre.wrap
    //        code.markdown.
    //            > parseJSON( base64URLdecode(encodedPayload) );
    //            <span class="jwt-payload">{
    //                "iss": "auth-backend",
    //                "sub": "jlennon",
    //                "aud": "web-frontend",
    //                "exp": 1458638618,
    //                "nbf": null,
    //                "iat": 1458635018,
    //                "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
    //                "name": "John Lennon",
    //                "permissions": ["EDITOR", "REVIEWER", <span class="code-hl">"ADMIN"</span>]
    //            }</span>
    //
    //            > signature
    //            <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>
    //
    //            > hmacSha256(encodedHeader + '.' + encodedPayload, 's3cr3t');
    //            <span class="jwt-signature"><span class="code-hl">sz_ALMnwaDEf7sF7wKeabiLPSUIBhDSdALvEiVb9G_c</span></span>
    //
    //    div(role='note').
    //        Du coup si qq change le payload, s'il ne connait pas le secret, le token sera invalide
    //
    //section.no-transition
    //    pre.wrap
    //        code.markdown.
    //            > parseJSON( base64URLdecode(encodedPayload) );
    //            <span class="jwt-payload">{
    //                "iss": "auth-backend",
    //                "sub": "jlennon",
    //                "aud": "web-frontend",
    //                "exp": <span class="code-hl">1500000000</span>,
    //                "nbf": null,
    //                "iat": 1458635018,
    //                "jti": "85a3cb4c-5720-4dba-ae94-931d60937c47",
    //                "name": "John Lennon",
    //                "permissions": ["PLAYING_GUITAR", "SINGING"]
    //            }</span>
    //
    //            > signature
    //            <span class="jwt-signature">kSsR0v7IxjKlb4CINq4akmPAd3fk9RxfMxrJclfZeSM</span>
    //
    //            > hmacSha256(encodedHeader + '.' + encodedPayload, 's3cr3t');
    //            <span class="jwt-signature"><span class="code-hl">YicKS8hG-PSnYyV22atgbwrshyS-_coW-s79xzFPcqs</span></span>
    //    div(role='note').

    //section
    //    .title JWT claims
    //    div(role='note').
    //        Claim
    //        authentification et authorization


    section.slide-section
        .fit-title
            .title What are JWT's
            .title <span class="title-info">benefits</span>?
        div(role='note').
            Quels sont les avantages des JWT ?

    section.slide-section.no-images
        .title.title-info #1
        .fit-title--small
            .title.title-info Dead simple
            .title Load balancing
        div(role='note').
            Premier avantage, niveau load balancing,
            c'est presque trop facile.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-scalable-01.svg")
        div(role='note').
            Pas de sticky session,
            pas de cache distribué,
            ni même de cache tout court.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-scalable-02.svg")
        div(role='note').
            On a juste besoin d'un secret partagé et de calculer une signature.

    section.slide-section.no-images
        .title.title-info #2
        .fit-title--small
            .title <span class="title-info">Multi</span>-language
        div(role='note').
            Deuxième avantage,
            c'est un standard.
            Il y a des implémentations dans...

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover
            img(src="/media/schema-jwt-languages.svg")
            //include media/schema-jwt-languages.svg
        div(role='note').
            ...tous les langages.
            que vous soyez dans un navigateur,
            sur iOS, Android et quelle que soit votre stack côté serveur,
            il y a une implémentation.

    section.slide-section.no-images
        .title.title-info #3
        .fit-title--small
            .title.title-info microservice
            .title Architectures
        div(role='note').
            3ème avantage : les architectures micro-services.

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--left
            img(src="/media/schema-jwt-scalable-microservices-01.svg")
        div(role='note').
            Si on reprend un exemple avec un cluster de deux noeuds,
            c'est

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img(src="/media/schema-jwt-scalable-microservices-02.svg")
        div(role='note').
            Micro services

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img(src="/media/schema-jwt-scalable-microservices-03.svg")
        div(role='note').
            Micro services

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img(src="/media/schema-jwt-scalable-microservices-04.svg")
        div(role='note').
            Micro services

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img(src="/media/schema-jwt-scalable-microservices-05.svg")
        div(role='note').
            Micro services

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img.trigger-media-on(src="/media/schema-jwt-scalable-microservices-06.svg")
            img.trigger-media-off(src="/media/schema-jwt-scalable-microservices-07.svg")
        div(role='note').
            Micro services

    section.no-transition
        figure.fs-media.fs-media-contain
            img(src="/media/microservices-and-shared-db.png")
        div(role='note').
            Grâce au JSON Web Token,
            l'ensemble des microservices de mon architecture sont autonomes pour accetper ou non une requêtes.

    section.no-transition
        div(role='note').
            Par contre depuis le début, je partage un secret.
            Quand je réplique le même service sur un cluster,
            ça ne me choque pas tant que ça.
            Par contre partager un secret sur plein de projets qui ont des cycles de vie différents,
            c'est un peu plus chaud.
            On va vite finir avec un secret qui n'est plus secret.

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-signatures-00.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-signatures-01.svg")
        div(role='note').
            Si on regarde de plus près comment sont calculée les signatures.
            On a la solution.

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-signatures-02a.svg")
        div(role='note').
        
    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-signatures-02.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-signatures-03.svg")
        div(role='note').

    section.no-transition
        pre.wrap
            code.
                > decodedHeader
                <span class="jwt-header">{
                    <span class="code-hl">"alg": "RS256"</span>,
                    "typ": "JWT"
                }</span>
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img.trigger-media-on(src="/media/schema-jwt-asym.svg")
            img.trigger-media-off(src="/media/schema-jwt-asym-keys.svg")
        div(role='note').
            Micro services

    section.slide-section.fit-title--small
        .title oAuth<span class="title-info">2</span>
        div(role='note').
            Schéma d'architecture
            JWT en tant que Bearer token (à la place d'un opaque)
            Bearer token devient un token par référence
                pertinence de le faire que dans le SI

    section.no-transition
        figure.fs-media.fs-media-cover
            img(src="/media/schema-oauth-token.svg")
        div(role='note').

    section.slide-section.no-images
        .fit-title.incremental.incremental-full
            .title Check access_token
            .title Check refresh_token
            .title.title-info stateless
        div(role='note').

    //section
    //    .title Schéma d'architecture oauth
    //    div(role='note').

    //section
    //    .title plus besoin du serveur oauth pour valider des access-token
    //    div(role='note').

    //section
    //    .title Bearer token devient un token par référence
    //    div(role='note').

    //section
    //    .title schéma d'archi firewall reference to valeur
    //    div(role='note').
    //        pertinence de le faire que dans le SI

    section.slide-section.fit-title
        .title Open-ID <span class="title-info zoom">Connect</span>
        div(role='note').

    section.slide-section.no-images
        .fit-title.incremental.incremental-full
            .title The ID token
            .title is a <span class="title-info">JWT</span>!
        div(role='note').

    //section
    //    .title schéma d'archi open ID
    //    div(role='note').
    //        JWT à la base d'Open ID
    //        Les token d'identité sont des JWT

    section.slide-section.fit-title
        .title What are JWT's
        .title <span class="title-red">drawbacks</span>?
        div(role='note').
            revokation
            Verre à moitié plein => verre à moitié vide
                whitelist vs blacklist
                optimisme du nombre de fois ou il faut expirer des session
            => short lived cest mieux

    section.slide-section.no-images
        .fit-title--small
        .title <span class="title-info">Tokens</span>
        .title.trigger-off revocation
        .title.trigger-on revokation
        .title.title-red :-(
        div(role='note').
            Expiration != revokation
            Black list vs white list
            Verre à moitié plein => verre à moitié vide
                whitelist vs blacklist
                optimisme du nombre de fois ou il faut expirer des session
                => short lived c'est mieux
                expiration

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img(src="/media/schema-jwt-blacklist-alpha.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right-nt
            img.trigger-media-on(src="/media/schema-jwt-blacklist-1.svg")
            img.trigger-media-off(src="/media/schema-jwt-blacklist-2.svg")
        div(role='note').

    section.slide-section.no-images.fit-title
        .title <span class="title-info">S</span>ingle <span class="title-info">P</span>age <span class="title-info">A</span>pplications
        .title security<span class="title-info">!!!</span>
        div(role='note').
            revokation
            Verre à moitié plein => verre à moitié vide
                whitelist vs blacklist
                optimisme du nombre de fois ou il faut expirer des session
            => short lived c'est mieux
    //section
    //    .title schema avec acces token et refresh token
    //    div(role='note').
    //        => short lived c'est mieux
    //        expiration

    section.slide-section.fit-title--small
        .title <span class="title-info">XSS</span>
        .title.shake Attacks
        div(role='note').
            Utiliser un cookie secure et HTTP only => XSS
            Ajouter un XSRF token dans le payload et qui est stoké aussi à part

    //- section.no-transition
    //-     figure.fs-media
    //-         img(src="/media/xss-twitter.jpg")
    //-     div(role='note').
    //-         explication de l'attaque XSS
    //-         Script tiers
    //-         Commentaires clients

    section.slide-section.no-images
        .fit-title.incremental
            .title User content <span class="title-info">injections</span>
            .title Third party <span class="title-info">Scripts</span>
            .title <span class="title-info">Non-secured HTTP</span> over public WIFIs
        div(role='note').

    section
        pre.nowrap
            code.
                # Single Page App / Mobile App / Third-party server

                200 OK
                Set-Cookie: jwt=<span class="jwt-header">H34DER</span>.<span class="jwt-payload">P4YL04D</span>.<span class="jwt-signature">S1GN47URE</span>;
                    Path=/;
                    Domain=api.myapp.com;
                    <span class="code-hl">Secure;</span>
                    <span class="code-hl">HTTPOnly</span>

    section
        pre.nowrap
            code.
                # Mobile App / Third-party server

                200 OK
                Authorization: Bearer <span class="jwt-header">H34DER</span>.<span class="jwt-payload">P4YL04D</span>.<span class="jwt-signature">S1GN47URE</span>

    section.slide-section.fit-title--small
        .title.trigger-off <span class="title-info">CSRF</span>
        .title.trigger-on <span class="title-info">XSRF</span>
        .title Attacks
        div(role='note').
            Utiliser un cookie secure et HTTP only => XSS
            Ajouter un XSRF token dans le payload et qui est stoké aussi à part

    section
        pre
            code.
                &lt;!-- <span class="code-hl">http://malicious.com</span> -->

                &lt;form action="https://twitter.com/i/tweet/create"
                      method="POST">

                    &lt;input type="hidden" name="status"
                           value="Star Wars I is my favorite!">
                &lt;/form>



    section
        pre
            code.
                &lt;!-- https://twitter.com -->

                &lt;form action="https://twitter.com/i/tweet/create"
                      method="POST">

                    &lt;input type="text" name="status"
                           value="No way man!">
                    &lt;input type="hidden" name="<span class="code-hl">authenticity_token</span>"
                           value="125d260e57fd924fc363534713e4bc43b774">
                &lt;/form>

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-03.svg")
        div(role='note').
            Synchronizer Token Pattern
            attention au content-type

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-04.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-05.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-06.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-07.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-08.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-09.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-01.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-02.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-03.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-04.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-05.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-06.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-07.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-08.svg")
        div(role='note').

    section.no-transition
        figure.fs-media.fs-media-cover.fs-media-cover--right
            img(src="/media/schema-csrf-jwt-09.svg")
        div(role='note').

    section.slide-section.fit-title--small
        .title other JWT
        .title.title-info applications
        div(role='note').

    section.slide-section.no-images.fit-title--small
        .title <span class="title-info">multi</span>-part
        .title user forms
        div(role='note').

    section.slide-section.no-images.fit-title--small
        .title confirmation
        .title <span class="title-info">Emails</span>
        div(role='note').

    section.slide-section.no-images
        div(role='note').
            Voilà, j'espère que vous avez une meilleure idée de ce que sont les JSON Web Token,
            de comment ils fonctionnent et dans quelle contexte ils sont utiles.

    section.slide-quote
        .quote Stateless<br>is priceless.
        .quote-author Thomas Recloux<br>Jérémy Sevellec
        img.quote-author-avatar(src="./media/thomas-recloux.jpg")
        img.quote-author-avatar.quote-author-avatar-two(src="./media/jeremy-sevellec.jpg")
        div(role='note').
            De manière générale, vous gagnerez toujours en simplicité avec des architectures stateless.
            Sauvons les Lemmings...

    section.slide-section.fit-title--small.slide-thx
        .title.zoom Dank u <span class="title-info">;-)</span>
        div(role='note').
            Merci bcp.

    section.slide-startEnd
        .startEnd-author
            .startEnd-authorName Hubert<br>Sablonnière
            img.startEnd-authorAvatar(src='media/hsablonniere-avatar.jpg')
            .startEnd-authorTwitter @hsablonniere<br>@OpenDevise
        .startEnd-title
            .startEnd-subtitle Game Over
            .startEnd-maintitle ?
        .startEnd-footer
            img.startEnd-companyLogo.zoom(src='./media/opendevise-web-20161031-blank.png')
            .startEnd-talkInfos
                .startEnd-hashtags #SaveTheLemmings #JWT
                .startEnd-locationDate Devoxx BE / 2016-11-09
        div(role='note').

    section.slide-section.no-images
        .fit-title
            .title <span class="title-info">stormpath</span>.com/blog
            .title <span class="title-info">auth0</span>.com/blog
            .title <span class="title-info">owasp</span>.org
            .title <span class="title-info">jwt</span>.io
        div(role='note').

    section.slide-section.no-images
        .fit-title
            .title HTTP/<span class="title-info">2</span>?
        div(role='note').

    section.slide-section.no-images
        .fit-title
            .title <span class="title-info">token</span> size?
        div(role='note').

    section.slide-section.no-images
        .fit-title
            .title Other specs:
            .title <span class="title-info">JW*</span>?
        div(role='note').

    section.slide-section.no-images
        .fit-title
            .title <span class="title-info">payload</span>
            .title encryption?
        div(role='note').

    section.slide-section.no-images
        .fit-title
            .title JWT can be
            .title pronouned <span class="title-info">"JOT"</span>
            .title (I don't like it)
        div(role='note').

    script(src="dzslides.js")
    script(src="highlight.pack.js")
    script(src="xtab.js")
    script(src="jwt.js")
    script(src="jsrsasign-5.0.7-all-min.js")
    script(src="dynamic-code-in-slides.js")
    script hljs.initHighlightingOnLoad();
